const e="/api",v={"CALCULATE-DISTANCE":`${e}/core/calculate-distance`,"UPLOAD-SEISMIC-FILE":`${e}/core/upload-seismic-file`,"DOWNLOAD-TEST-FILE":`${e}/core/download-test-file`,"DOWNLOAD-FILE":`${e}/core/download-file`,"SAVE-ARRIVALS":`${e}/core/save-arrivals`,"ADD-TRACE":`${e}/handle-seismic-traces/add-trace`,"UPDATE-TRACE-HEADER":`${e}/handle-seismic-traces/update-trace-header`,"TRIM-WAVEFORM":`${e}/signal-processing/trim`,"TAPER-WAVEFORM":`${e}/signal-processing/taper`,"DETREND-WAVEFORM":`${e}/signal-processing/detrend`,"FILTER-WAVEFORM":`${e}/signal-processing/filter`,"COMPUTE-FOURIER":`${e}/signal-processing/compute-fourier`,"COMPUTE-HVSR":`${e}/signal-processing/compute-hvsr`},y=[{value:"cosine",label:"Cosine taper"},{value:"barthann",label:"Bartlett-Hann"},{value:"bartlett",label:"Bartlett"},{value:"blackman",label:"Blackman"},{value:"blackmanharris",label:"Blackman-Harris"},{value:"bohman",label:"Bohman"},{value:"boxcar",label:"Boxcar"},{value:"chebwin",label:"Dolph-Chebyshev"},{value:"flattop",label:"Flat top"},{value:"gaussian",label:"Gaussian std"},{value:"general_gaussian",label:"Gen. Gaussian"},{value:"hamming",label:"Hamming"},{value:"hann",label:"Hann"},{value:"kaiser",label:"Kaiser"},{value:"nuttall",label:"Nuttall"},{value:"parzen",label:"Parzen"},{value:"slepian",label:"Slepian"},{value:"triang",label:"Triangular"}],g=[{value:"left",label:"left"},{value:"right",label:"right"},{value:"both",label:"both"}],f=[{value:"linear",label:"linear"},{value:"constant",label:"constant"},{value:"simple",label:"simple"}],h=[{label:"initial",value:"initial"},{label:"1-2",value:"1-2"},{label:"1-3",value:"1-3"},{label:"1-5",value:"1-5"},{label:"1-10",value:"1-10"},{label:"0.1-10",value:"0.1-10"}],E={line:{color:"#d4003c",width:3,style:"dot"},label:{size:30}},b=[{label:"Vertical (Z)",value:"Z"},{label:"North-South (N)",value:"N"},{label:"East-West (E)",value:"E"},{label:"Generic Horizontal 1 (X)",value:"X"},{label:"Generic Horizontal 2 (Y)",value:"Y"},{label:"Radial (R)",value:"R"},{label:"Transverse (T)",value:"T"},{label:"Alternative Horizontal 1 (1)",value:"1"},{label:"Alternative Horizontal 2 (2)",value:"2"},{label:"Up (U)",value:"U"},{label:"Vertical Alternative (V)",value:"V"},{label:"Horizontal (H)",value:"H"}],S=[{type:"number",label:"Skip rows",name:"skip_rows",id:"skip_rows",category:"file parameters"},{type:"number",label:"Select column",name:"column_index",id:"column_index",category:"file parameters"},{type:"text",label:"Station",name:"station",id:"station",placeholder:"e.g. SEIS",category:"seismic parameters"},{type:"select",label:"Component",name:"component",id:"component",optionsList:b,category:"seismic parameters"},{type:"date",label:"Start date",name:"start_date",id:"start_date",category:"seismic parameters"},{type:"time",label:"Start time",name:"start_time",id:"start_time",category:"seismic parameters"},{type:"number",label:"Sampling rate",name:"sampling_rate",id:"sampling_rate",category:"seismic parameters"}],O=[{type:"text",label:"Station",name:"station",id:"station",placeholder:"e.g. SEIS",readOnly:!1},{type:"date",label:"Start date",name:"start_date",id:"start_date",readOnly:!1},{type:"time",label:"Start time",name:"start_time",id:"start_time",readOnly:!1},{type:"select",label:"Component",name:"component",id:"component",optionsList:b,readOnly:!1},{type:"number",label:"Sampling rate *",name:"sampling_rate",id:"sampling_rate",readOnly:!0},{type:"number",label:"Total sample points *",name:"npts",id:"npts",readOnly:!0}];async function T({endpoint:u,setError:i,setSuccess:r,setLoading:o,method:c="GET",data:l=null,returnType:s="json",successMessage:m=null,onError:t=null}){const n={method:c,credentials:"include"};if(c==="POST")if(l instanceof FormData)n.body=l;else if(typeof l=="object")n.headers={"Content-Type":"application/json"},n.body=JSON.stringify(l);else throw new Error("Invalid data type: Must be an object or FormData.");o(!0);try{const a=await fetch(u,n);if(!a.ok){const p=await a.json();throw i(p.error_message),r(null),setTimeout(()=>{i([])},8e3),t&&t(),new Error(p.error_message.join(", "))}const d=s==="blob"?await a.blob():s==="text"?await a.text():s==="arrayBuffer"?await a.arrayBuffer():await a.json();return m&&r(m),i([]),setTimeout(()=>{r(null)},8e3),d}catch(a){throw console.error(`Fetch request failed: ${a.message}`),t&&t(),a}finally{o(!1)}}export{v as a,E as b,h as c,g as d,f as e,T as f,S as g,O as h,y as t};
